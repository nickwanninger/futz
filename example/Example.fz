-- def id :: some Num a => a -> a
--   | id x = x

-- data Unit = Unit -- An empty type!

-- The simple monad class.
-- class Monad m
--   def >>= ::  m a -> (a -> m b) -> m b
--   def >> :: m a -> m b -> m b
--   def return :: a -> m a
-- end
--
-- -- This should desugar into these definitions before type inference:
-- def (>>=) :: some Monad m => m a -> (a -> m b) -> m b
--
-- def (>>) :: some Monad m => m a -> m b -> m b
--
-- def print :: a -> IO Unit
-- def readline :: a
--
-- def main = do
--   print 1
--   print 2
--   x <- readline
--   print 3


def id x = x

-- PATTERN MATCHING
-- def foo1 x =
--   match x on
--     Foo (Bar a) => AA
--     Foo a => BB
--     a => CC

-- -- First, group the patterns by the constructor names:
--
-- def foo2 x =
--   match x on
--     -- The least general match
--     Foo (Bar a) => AA
--     Foo a => BB
--
--     -- The most general match
--     a => CC
--
-- -- For each pattern groups fuse them into a 
--
-- def foo3 x =
--   match x on
--     -- The least general match
--     Foo (Bar a c) => AA
--     Foo a => BB
--
--     -- The most general match
--     a => CC



-- def main2 = 

def (+) :: Int -> Int -> Int
  | a + b = #(addInt :: Int | a | b )

def (-) :: Int -> Int -> Int
  | a - b = #(subInt :: Int | a | b )

def (*) :: Int -> Int -> Int
  | (*) a b = #(mulInt :: Int | a | b )

def (/) :: Int -> Int -> Int
  | a / b = #(divInt :: Int | a | b )

def (==) :: Int -> Int -> Bool
  | a == b = #(eqInt :: Bool | a | b )
--
data Bool = True | False
data Unit = Unit
data Maybe a = Just a | Nothing



-- def f . g = fn x -> f (g x)


def safediv n d = if d == 0 then Nothing else Just (n / d)
def foo x y = (safediv x y) >>= (fn val -> Just val)
--
--
def default x d =
  match x on
    Just x => x
    Nothing => d
--
-- -- data List a = Cons a (List a) | Nil
-- data Pair a b = Pair a b
--
-- data SF a b = SF (a -> (Pair b (SF a b)))
-- def arr f = 
--       let result = SF (fn x -> (Pair (f x) result))
--        in result
--
-- def (SF f1) >>> (SF f2) =
--   let fr x = match f1 x of
--               Pair r1 sf1 =>
--                  match f2 r1 of
--                     Pair r2 sf2 => Pair r2 (sf1 >>> sf2)
--   in SF fr
          
  -- let fr x = let (Pair r1 sf1) = f1 x
  --              | (Pair r2 sf2) = f2 r1
  --             in Pair r2 (sf1 >>> sf2)
  --  in SF fr

-- def s1 >>> f2 = 

-- def foo :: Int
--   | foo = 4
--
-- def x ?= d = match x { Just a => a;
--                        Nothing => 4 }


-- data Tree a = Branch (Tree a) (Tree a) | Leaf a

-- def sum n =
--     if n == 1 then
--        n
--     else 
--        let f x = n + x
--         in f (sum (n - 1))

-- def foo (Some x) = x
--   | foo (None) = 0

-- let rec sum n =
--   if n = 1 then
--     1
--   else
--     let f x =
--       n + x in
--     f (sum (n - 1)) in
--       sum 100

-- def show :: Show a => a -> String
-- def (++) :: String -> String -> String

-- def myShow a b = (show a) ++ (show b)
-- def fuzz :: a -> b -> c -> d -> e -> f -> g
-- def (+) :: {Num a} a -> a -> a
--   | (+) a b = #(addInt :: a | a | b)
--
-- def foo a b = a + b

-- def doodad :: {Eq a} a -> a

-- def print a = internalDoIO

-- def main :: IO a
--   | main = print 4


-- typeTest = let id = \x -> x in id 42
-- addTest = let add = \x y -> x + y in add 1 2
-- idTest = (\x -> x) 42
-- dumbLet = let x = 42 in x
-- (+) :: Int -> Int -> Int

-- (+) = \x y -> $add x y

-- (+) :: Int -> Int -> Int
-- (-) :: Int -> Int -> Int
-- (*) :: Int -> Int -> Int
-- (/) :: Int -> Int -> Int

-- data Maybe 'a = Just 'a | Nothing

-- $add :: Num 'a => 'a -> 'a -> 'a
-- (+) :: Num 'a => 'a -> 'a -> 'a
-- (+) = \a b -> $add a b
-- $sub :: Int -> Int -> Int
-- (-) = \a b -> $sub a b
-- $mul :: Int -> Int -> Int
-- (*) = \a b -> $mul a b
-- $div :: Int -> Int -> Int
-- (/) = \a b -> $div a b

-- flip = \f x y -> f y x
-- foo = \x -> x + 4

-- eq :: 'a -> 'a -> Bool



-- fuzz = \x -> foo + x
-- compose :: ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c
-- compose = fn f g x -> f of g x
-- (.) = compose

-- (>>=) :: 'm 'a -> ('a -> 'm 'b) -> 'm 'b
-- just :: 'a -> Maybe 'a
-- something = fn f -> f >>= (fn x -> just 4)
-- zoop :: Num 'a => 'a
-- zoop = 4
-- let boop = fn x -> zoop + x
-- doop = if  then 1 else 5
-- zoop = 4
-- foo = \c x y -> if c then x + y else y

-- foo :: Int -> Int
-- foo = \x -> if x then 1 else 0

